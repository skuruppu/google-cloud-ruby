### YamlMime:UniversalReference
items:
  - uid: Google::Api::ResourceDescriptor
    children: 
      - Google::Api::ResourceDescriptor#type
      - Google::Api::ResourceDescriptor#pattern
      - Google::Api::ResourceDescriptor#name_field
      - Google::Api::ResourceDescriptor#history
      - Google::Api::ResourceDescriptor#plural
      - Google::Api::ResourceDescriptor#singular
      - Google::Api::ResourceDescriptor#style
      - Google::Api::ResourceDescriptor::History
      - Google::Api::ResourceDescriptor::Style
    fullName: Google::Api::ResourceDescriptor
    langs:
      - ruby
    module: google-cloud-vision-v1
    id: ResourceDescriptor
    summary: "A simple descriptor of a resource type.

ResourceDescriptor annotates a resource message (either by means of a
protobuf annotation or use in the service config), and associates the
resource's schema, the resource type, and the pattern of the resource name.

Example:

    message Topic {
      // Indicates this message defines a resource schema.
      // Declares the resource type in the format of {service}/{kind}.
      // For Kubernetes resources, the format is {api group}/{kind}.
      option (google.api.resource) = {
        type: 'pubsub.googleapis.com/Topic'
        name_descriptor: {
          pattern: 'projects/{project}/topics/{topic}'
          parent_type: 'cloudresourcemanager.googleapis.com/Project'
          parent_name_extractor: 'projects/{project}'
        }
      };
    }

The ResourceDescriptor Yaml config will look like:

    resources:
    - type: 'pubsub.googleapis.com/Topic'
      name_descriptor:
        - pattern: 'projects/{project}/topics/{topic}'
          parent_type: 'cloudresourcemanager.googleapis.com/Project'
          parent_name_extractor: 'projects/{project}'

Sometimes, resources have multiple patterns, typically because they can
live under multiple parents.

Example:

    message LogEntry {
      option (google.api.resource) = {
        type: 'logging.googleapis.com/LogEntry'
        name_descriptor: {
          pattern: 'projects/{project}/logs/{log}'
          parent_type: 'cloudresourcemanager.googleapis.com/Project'
          parent_name_extractor: 'projects/{project}'
        }
        name_descriptor: {
          pattern: 'folders/{folder}/logs/{log}'
          parent_type: 'cloudresourcemanager.googleapis.com/Folder'
          parent_name_extractor: 'folders/{folder}'
        }
        name_descriptor: {
          pattern: 'organizations/{organization}/logs/{log}'
          parent_type: 'cloudresourcemanager.googleapis.com/Organization'
          parent_name_extractor: 'organizations/{organization}'
        }
        name_descriptor: {
          pattern: 'billingAccounts/{billing_account}/logs/{log}'
          parent_type: 'billing.googleapis.com/BillingAccount'
          parent_name_extractor: 'billingAccounts/{billing_account}'
        }
      };
    }

The ResourceDescriptor Yaml config will look like:

    resources:
    - type: 'logging.googleapis.com/LogEntry'
      name_descriptor:
        - pattern: 'projects/{project}/logs/{log}'
          parent_type: 'cloudresourcemanager.googleapis.com/Project'
          parent_name_extractor: 'projects/{project}'
        - pattern: 'folders/{folder}/logs/{log}'
          parent_type: 'cloudresourcemanager.googleapis.com/Folder'
          parent_name_extractor: 'folders/{folder}'
        - pattern: 'organizations/{organization}/logs/{log}'
          parent_type: 'cloudresourcemanager.googleapis.com/Organization'
          parent_name_extractor: 'organizations/{organization}'
        - pattern: 'billingAccounts/{billing_account}/logs/{log}'
          parent_type: 'billing.googleapis.com/BillingAccount'
          parent_name_extractor: 'billingAccounts/{billing_account}'

For flexible resources, the resource name doesn't contain parent names, but
the resource itself has parents for policy evaluation.

Example:

    message Shelf {
      option (google.api.resource) = {
        type: 'library.googleapis.com/Shelf'
        name_descriptor: {
          pattern: 'shelves/{shelf}'
          parent_type: 'cloudresourcemanager.googleapis.com/Project'
        }
        name_descriptor: {
          pattern: 'shelves/{shelf}'
          parent_type: 'cloudresourcemanager.googleapis.com/Folder'
        }
      };
    }

The ResourceDescriptor Yaml config will look like:

    resources:
    - type: 'library.googleapis.com/Shelf'
      name_descriptor:
        - pattern: 'shelves/{shelf}'
          parent_type: 'cloudresourcemanager.googleapis.com/Project'
        - pattern: 'shelves/{shelf}'
          parent_type: 'cloudresourcemanager.googleapis.com/Folder'"
    type: 'class'
  - uid: Google::Api::ResourceDescriptor#type
    fullName: Google::Api::ResourceDescriptor#type
    name: type
    langs:
      - ruby
    module: google-cloud-vision-v1
    id: type
    summary: ""
    type: method
    syntax:
      description: ""
      content: "#type => ::String"
      parameters:
        []
      return:
          type:
            - "::String"
          description: "The resource type. It must be in the format of
\\{service_name}/\\{resource_type_kind}. The `resource_type_kind` must be
singular and must not include version numbers.

Example: `storage.googleapis.com/Bucket`

The value of the resource_type_kind must follow the regular expression
/[A-Za-z][a-zA-Z0-9]+/. It should start with an upper case character and
should use PascalCase (UpperCamelCase). The maximum number of
characters allowed for the `resource_type_kind` is 100."
  - uid: Google::Api::ResourceDescriptor#type=
    fullName: Google::Api::ResourceDescriptor#type=
    name: type=
    langs:
      - ruby
    module: google-cloud-vision-v1
    id: type=
    summary: ""
    type: method
    syntax:
      description: ""
      content: "#type= => ::String"
      parameters:
        []
      return:
          type:
            - "::String"
          description: "The resource type. It must be in the format of
\\{service_name}/\\{resource_type_kind}. The `resource_type_kind` must be
singular and must not include version numbers.

Example: `storage.googleapis.com/Bucket`

The value of the resource_type_kind must follow the regular expression
/[A-Za-z][a-zA-Z0-9]+/. It should start with an upper case character and
should use PascalCase (UpperCamelCase). The maximum number of
characters allowed for the `resource_type_kind` is 100."
  - uid: Google::Api::ResourceDescriptor#pattern
    fullName: Google::Api::ResourceDescriptor#pattern
    name: pattern
    langs:
      - ruby
    module: google-cloud-vision-v1
    id: pattern
    summary: ""
    type: method
    syntax:
      description: ""
      content: "#pattern => ::Array<::String>"
      parameters:
        []
      return:
          type:
            - "::Array<::String>"
          description: "Optional. The relative resource name pattern associated with this resource
type. The DNS prefix of the full resource name shouldn't be specified here.

The path pattern must follow the syntax, which aligns with HTTP binding
syntax:

    Template = Segment { '/' Segment } ;
    Segment = LITERAL | Variable ;
    Variable = '{' LITERAL '}' ;

Examples:

    - 'projects/\\{project}/topics/\\{topic}'
    - 'projects/\\{project}/knowledgeBases/\\{knowledge_base}'

The components in braces correspond to the IDs for each resource in the
hierarchy. It is expected that, if multiple patterns are provided,
the same component name (e.g. 'project') refers to IDs of the same
type of resource."
  - uid: Google::Api::ResourceDescriptor#pattern=
    fullName: Google::Api::ResourceDescriptor#pattern=
    name: pattern=
    langs:
      - ruby
    module: google-cloud-vision-v1
    id: pattern=
    summary: ""
    type: method
    syntax:
      description: ""
      content: "#pattern= => ::Array<::String>"
      parameters:
        []
      return:
          type:
            - "::Array<::String>"
          description: "Optional. The relative resource name pattern associated with this resource
type. The DNS prefix of the full resource name shouldn't be specified here.

The path pattern must follow the syntax, which aligns with HTTP binding
syntax:

    Template = Segment { '/' Segment } ;
    Segment = LITERAL | Variable ;
    Variable = '{' LITERAL '}' ;

Examples:

    - 'projects/\\{project}/topics/\\{topic}'
    - 'projects/\\{project}/knowledgeBases/\\{knowledge_base}'

The components in braces correspond to the IDs for each resource in the
hierarchy. It is expected that, if multiple patterns are provided,
the same component name (e.g. 'project') refers to IDs of the same
type of resource."
  - uid: Google::Api::ResourceDescriptor#name_field
    fullName: Google::Api::ResourceDescriptor#name_field
    name: name_field
    langs:
      - ruby
    module: google-cloud-vision-v1
    id: name_field
    summary: ""
    type: method
    syntax:
      description: ""
      content: "#name_field => ::String"
      parameters:
        []
      return:
          type:
            - "::String"
          description: "Optional. The field on the resource that designates the resource name
field. If omitted, this is assumed to be 'name'."
  - uid: Google::Api::ResourceDescriptor#name_field=
    fullName: Google::Api::ResourceDescriptor#name_field=
    name: name_field=
    langs:
      - ruby
    module: google-cloud-vision-v1
    id: name_field=
    summary: ""
    type: method
    syntax:
      description: ""
      content: "#name_field= => ::String"
      parameters:
        []
      return:
          type:
            - "::String"
          description: "Optional. The field on the resource that designates the resource name
field. If omitted, this is assumed to be 'name'."
  - uid: Google::Api::ResourceDescriptor#history
    fullName: Google::Api::ResourceDescriptor#history
    name: history
    langs:
      - ruby
    module: google-cloud-vision-v1
    id: history
    summary: ""
    type: method
    syntax:
      description: ""
      content: "#history => ::Google::Api::ResourceDescriptor::History"
      parameters:
        []
      return:
          type:
            - "::Google::Api::ResourceDescriptor::History"
          description: "Optional. The historical or future-looking state of the resource pattern.

Example:

    // The InspectTemplate message originally only supported resource
    // names with organization, and project was added later.
    message InspectTemplate {
      option (google.api.resource) = {
        type: 'dlp.googleapis.com/InspectTemplate'
        pattern:
        'organizations/{organization}/inspectTemplates/{inspect_template}'
        pattern: 'projects/{project}/inspectTemplates/{inspect_template}'
        history: ORIGINALLY_SINGLE_PATTERN
      };
    }"
  - uid: Google::Api::ResourceDescriptor#history=
    fullName: Google::Api::ResourceDescriptor#history=
    name: history=
    langs:
      - ruby
    module: google-cloud-vision-v1
    id: history=
    summary: ""
    type: method
    syntax:
      description: ""
      content: "#history= => ::Google::Api::ResourceDescriptor::History"
      parameters:
        []
      return:
          type:
            - "::Google::Api::ResourceDescriptor::History"
          description: "Optional. The historical or future-looking state of the resource pattern.

Example:

    // The InspectTemplate message originally only supported resource
    // names with organization, and project was added later.
    message InspectTemplate {
      option (google.api.resource) = {
        type: 'dlp.googleapis.com/InspectTemplate'
        pattern:
        'organizations/{organization}/inspectTemplates/{inspect_template}'
        pattern: 'projects/{project}/inspectTemplates/{inspect_template}'
        history: ORIGINALLY_SINGLE_PATTERN
      };
    }"
  - uid: Google::Api::ResourceDescriptor#plural
    fullName: Google::Api::ResourceDescriptor#plural
    name: plural
    langs:
      - ruby
    module: google-cloud-vision-v1
    id: plural
    summary: ""
    type: method
    syntax:
      description: ""
      content: "#plural => ::String"
      parameters:
        []
      return:
          type:
            - "::String"
          description: "The plural name used in the resource name and permission names, such as
'projects' for the resource name of 'projects/\\{project}' and the permission
name of 'cloudresourcemanager.googleapis.com/projects.get'. It is the same
concept of the `plural` field in k8s CRD spec
https://kubernetes.io/docs/tasks/access-kubernetes-api/custom-resources/custom-resource-definitions/

Note: The plural form is required even for singleton resources. See
https://aip.dev/156"
  - uid: Google::Api::ResourceDescriptor#plural=
    fullName: Google::Api::ResourceDescriptor#plural=
    name: plural=
    langs:
      - ruby
    module: google-cloud-vision-v1
    id: plural=
    summary: ""
    type: method
    syntax:
      description: ""
      content: "#plural= => ::String"
      parameters:
        []
      return:
          type:
            - "::String"
          description: "The plural name used in the resource name and permission names, such as
'projects' for the resource name of 'projects/\\{project}' and the permission
name of 'cloudresourcemanager.googleapis.com/projects.get'. It is the same
concept of the `plural` field in k8s CRD spec
https://kubernetes.io/docs/tasks/access-kubernetes-api/custom-resources/custom-resource-definitions/

Note: The plural form is required even for singleton resources. See
https://aip.dev/156"
  - uid: Google::Api::ResourceDescriptor#singular
    fullName: Google::Api::ResourceDescriptor#singular
    name: singular
    langs:
      - ruby
    module: google-cloud-vision-v1
    id: singular
    summary: ""
    type: method
    syntax:
      description: ""
      content: "#singular => ::String"
      parameters:
        []
      return:
          type:
            - "::String"
          description: "The same concept of the `singular` field in k8s CRD spec
https://kubernetes.io/docs/tasks/access-kubernetes-api/custom-resources/custom-resource-definitions/
Such as 'project' for the `resourcemanager.googleapis.com/Project` type."
  - uid: Google::Api::ResourceDescriptor#singular=
    fullName: Google::Api::ResourceDescriptor#singular=
    name: singular=
    langs:
      - ruby
    module: google-cloud-vision-v1
    id: singular=
    summary: ""
    type: method
    syntax:
      description: ""
      content: "#singular= => ::String"
      parameters:
        []
      return:
          type:
            - "::String"
          description: "The same concept of the `singular` field in k8s CRD spec
https://kubernetes.io/docs/tasks/access-kubernetes-api/custom-resources/custom-resource-definitions/
Such as 'project' for the `resourcemanager.googleapis.com/Project` type."
  - uid: Google::Api::ResourceDescriptor#style
    fullName: Google::Api::ResourceDescriptor#style
    name: style
    langs:
      - ruby
    module: google-cloud-vision-v1
    id: style
    summary: ""
    type: method
    syntax:
      description: ""
      content: "#style => ::Array<::Google::Api::ResourceDescriptor::Style>"
      parameters:
        []
      return:
          type:
            - "::Array<::Google::Api::ResourceDescriptor::Style>"
          description: "Style flag(s) for this resource.
These indicate that a resource is expected to conform to a given
style. See the specific style flags for additional information."
  - uid: Google::Api::ResourceDescriptor#style=
    fullName: Google::Api::ResourceDescriptor#style=
    name: style=
    langs:
      - ruby
    module: google-cloud-vision-v1
    id: style=
    summary: ""
    type: method
    syntax:
      description: ""
      content: "#style= => ::Array<::Google::Api::ResourceDescriptor::Style>"
      parameters:
        []
      return:
          type:
            - "::Array<::Google::Api::ResourceDescriptor::Style>"
          description: "Style flag(s) for this resource.
These indicate that a resource is expected to conform to a given
style. See the specific style flags for additional information."
references: 
  - uid: Google::Api::ResourceDescriptor::History
    fullName: Google::Api::ResourceDescriptor::History
    name: History
    module: google-cloud-vision-v1
    id: History
    summary: "A description of the historical or future-looking state of the
resource pattern."
    parent: Google::Api::ResourceDescriptor

  - uid: Google::Api::ResourceDescriptor::Style
    fullName: Google::Api::ResourceDescriptor::Style
    name: Style
    module: google-cloud-vision-v1
    id: Style
    summary: "A flag representing a specific style that a resource claims to conform to."
    parent: Google::Api::ResourceDescriptor

